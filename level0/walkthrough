Plusieurs bonne pratique se repeterons a chaque niveau, je vais les lister ici et n'en ferait plus part dans les prochains walkthrough.

level0@RainFall:~$ file ./level0
./level0: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=0x85cf4024dbe79c7ccf4f30e7c601a356ce04f412, not stripped

level0@RainFall:~$ strings ./level0
-bash: /usr/bin/strings: Input/output error

level0@RainFall:~$ ltrace ./level0
ltrace: Couldn't find .dynsym or .dynstr in "./level0"

level0@RainFall:~$ objdump -d ./level0 -M Intel
	... -{f, x, S, g, t}

level0@RainFall:~$ ./level0
Segmentation fault (core dumped)

Je commence alors l'inspection du fichier en prenant compte des protections sur celui-ci et le kernel.

level0@RainFall:~$ gdb ./level0
Reading symbols from /home/user/level0/level0...(no debugging symbols found)...done.
	...
(gdb) set disassembly-flavor intel
(gdb) display /5i $pc
(gdb) b main
Breakpoint 1 at 0x8048ec3
(gdb) disass main
Dump of assembler code for function main:
	...
   0x08048ed4 <+20>:	call   0x8049710 <atoi>
   0x08048ed9 <+25>:	cmp    eax,0x1a7

s'effectue un atoi sur le premier argument du programe, ainsi qu'une comparaison avec le chiffre 423 sur le resultat du atoi.
Si la cmp est bonne, apres avoir bien re-set le gid et le uid du level1 le programme execute la fonction execv avec les parametre "/bin/sh" pour lancer un shell.

   0x08048f4a <+138>:	mov    DWORD PTR [esp],0x80c5348
   0x08048f51 <+145>:	call   0x8054640 <execv>

(gdb) x/s 0x80c5348
0x80c5348:	 "/bin/sh"

Nous allons donc lancer le programme avec un argument 423.

level0@RainFall:~$ ./level0 423
$ whoami
level1
$ cat /home/user/level1/.pass
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a
$ exit
level0@RainFall:~$ su level1
Password:
Done.
